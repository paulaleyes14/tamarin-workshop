theory ExerciseADH
begin

builtins: symmetric-encryption, diffie-hellman

rule Ltk:
  let publicComponent = 'g'^~sk in
  [Fr(~sk)]
  -->
  [!Ltk($P, ~sk), !Pk($P, publicComponent), Out(publicComponent)]

rule A_Init:
  [!Pk($A, pkA)]
  --[ ReachAInit() ]->
  [ Out(<$A,$B,pkA>)
   , St_A($A,$B)
  ]

rule B_Init:
  let sharedKey = pkA^~sk in
  [ !Ltk($B,~sk), !Pk($A,pkA), !Pk($B,pkB), In(<$A,$B,pkA>)
  ]
  --[ ReachBInit(), ResponderKey(sharedKey)
    ]->
  [  Out(<senc('ack',sharedKey),$A,$B,pkB>)
  ]

rule A_SendMsg:
  let sharedKey = pkB^~sk in
  [ !Ltk($A,~sk), Fr(~msg), !Pk($B, pkB), In(<Boback,$A,$B,pkB>) , St_A($A,$B)
  ]
  --[ ReachASendMsg(),MessageWasSent(~msg), InitiatorKey(sharedKey), Eq(sdec(Boback,sharedKey),'ack')
    ]->
  [ Out(senc(~msg,sharedKey))
  ]

// This restriction allows you to use the Eq action fact in rules to constrain
// that two terms must be equal. This is used to "compare" two messages or
// terms, e.g., to check that signature verification is equal to true.
// This rule is only commented out right now to suppress a warning that Eq is
// referenced but not used. Un-comment it whenever you want!
restriction Eq:
   "All t1 t2 #x. Eq(t1, t2) @ #x ==> t1 = t2"

lemma Executability:
  exists-trace
  "Ex #t1 #t2 #t3. ReachAInit() @ #t1 & ReachBInit() @ #t2 & ReachASendMsg() @ #t3"

// K(m) @ #t means that the adversary knows message m at timepoint #t.
// Again, the following lemmas are commented out to suppress warnings.
lemma ResponderKeySecrecy:
  "All k #t. ResponderKey(k) @ #t ==> not Ex #x. K(k) @ #x"

// This lemma is saying that the key of the initiator remains secret
lemma InitiatorKeySecrecy:
  "All k #t. InitiatorKey(k) @ #t ==> not Ex #x. K(k) @ #x"

// This lemma says that the plaintext of the encrypted message also remains secret
lemma SendMsgSecrecy:
  "All m #t. MessageWasSent(m) @ #t ==> not Ex #x. K(m) @ #x"

end